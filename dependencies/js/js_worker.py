"""Functions to handle JavaScript files"""
import json

import yaml
from pyarn import lockfile


def handle_yarn_lock(req_file_data: str) -> dict:
    """
    Parse yarn lock file
    :param req_file_data: Content of yarn.lock
    :return: list of requirement and specs
    """
    res = {}
    if "lockfile v1" in req_file_data:
        parsed_lockfile = lockfile.Lockfile.from_str(req_file_data)
        unfiltered_content: dict = json.loads(
            parsed_lockfile.to_json()
        )
    else:
        unfiltered_content = yaml.safe_load(req_file_data)
    keys = ["resolution", "dependencies"]
    for name, obj in unfiltered_content.items():
        flat = {}
        gen = (x for x in keys if x in obj)
        for k in gen:
            if isinstance(obj[k], dict):
                flat[k] = list(
                    map(
                        lambda x: str(x[0]) + ";" + str(x[1]),
                        obj[k].items()
                    )
                )
            else:
                flat[k] = obj[k]
        res[name] = flat
    return res


def handle_json(req_file_data: str) -> dict:
    """
    Parse json files generated by npm or yarn
    :param req_file_data: Content of package.json
    :return: list of requirement and specs
    """
    package_data = json.loads(req_file_data)
    filter_dict = {
        "lang_ver": package_data.get(
            "engines", {}
        ).get("node", ""),
        "pkg_name": package_data.get("name", ""),
        "pkg_ver": package_data.get("version", ""),
        "pkg_lic": package_data.get("license", ""),
        "pkg_dep": package_data.get("dependencies", []),
    }
    for k, v in filter_dict.items():
        if k is "pkg_dep":
            filter_dict[k] = [";".join(i) for i in v.items()]
        elif isinstance(v, dict):
            filter_dict[k] = ";".join(v.values())
        elif isinstance(v, list):
            if any(
                    isinstance(i, dict)
                    for i in v
            ):
                temp_list = [
                    ";".join(s.values())
                    for s in v
                    if isinstance(s, dict)
                ]
                filter_dict[k] = ";".join(temp_list)
            else:
                filter_dict[k] = ";".join(v)
    filter_dict["pkg_err"] = ""
    return filter_dict
